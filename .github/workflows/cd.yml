name: CD

on:
  pull_request:
    types: [closed, review_requested, ready_for_review, synchronize, opened]

jobs:
  publish-docker-image:
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    env:
      NODE_ENV: "prod"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./
          push: true
          tags: ${{ github.repository }}:latest

  deploy:
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    needs: publish-docker-image
    env:
      SSH_PRIVATE_KEY: ${{ secrets.AWS_KEY }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      WORK_DIR: ${{ secrets.WORK_DIR }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get repo name
        run: |
          echo "${{github.repository}}" | cut -d "/" -f 2 > repo.txt
          echo "REPO_NAME=$(cat repo.txt)" >> $GITHUB_ENV
          rm -rf repo.txt
      - name: Set up SSH key
        run: |
          echo "${{ env.SSH_PRIVATE_KEY }}" | base64 -d > ~/aws.pem
          chmod 600 ~/aws.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.SSH_HOST }} > ~/.ssh/known_hosts
      - name: Deploy production
        run: |
          ssh -i ~/aws.pem -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "cd ${{ env.WORK_DIR }}/${{env.REPO_NAME}} && docker-compose pull && docker-compose up -d && docker image prune -f && exit"
      - name: Clean up
        run: rm -rf ~/aws.pem
